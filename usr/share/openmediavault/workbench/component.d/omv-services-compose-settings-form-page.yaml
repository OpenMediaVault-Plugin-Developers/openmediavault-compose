version: "1.0"
type: component
data:
  name: omv-services-compose-settings-form-page
  type: formPage
  config:
    request:
      service: Compose
      get:
        method: get
      post:
        method: set
    fields:
      - type: divider
        title: _("Compose Files")
      - type: sharedFolderSelect
        name: sharedfolderref
        label: _("Shared folder")
        hasEmptyOption: true
        hint: _("Location of compose files")
      - type: container
        fields:
          - type: select
            name: composeowner
            label: _("Owner of directories and files")
            placeholder: _("Select a user ...")
            value: "root"
            valueField: "name"
            textField: "name"
            store:
              proxy:
                service: UserMgmt
                get:
                  method: enumerateAllUsers
              sorters:
                - dir: asc
                  prop: name
            validators:
              required: true
          - type: select
            name: composegroup
            label: _("Group of directories and files")
            placeholder: _("Select a group ...")
            value: "root"
            valueField: "name"
            textField: "name"
            store:
              proxy:
                service: UserMgmt
                get:
                  method: enumerateAllGroups
              sorters:
                - dir: asc
                  prop: name
            validators:
              required: true
      - type: select
        name: mode
        label: _("Permissions of directories and files")
        value: "700"
        store:
          data:
            - - "700"
              - _("Administrator - read/write, Users - no access, Others - no access")
            - - "750"
              - _("Administrator - read/write, Users - read-only, Others - no access")
            - - "770"
              - _("Administrator - read/write, Users - read/write, Others - no access")
            - - "755"
              - _("Administrator - read/write, Users - read-only, Others - read-only")
            - - "775"
              - _("Administrator - read/write, Users - read/write, Others - read-only")
            - - "777"
              - _("Everyone - read/write")
      - type: divider
        title: _("Data")
      - type: sharedFolderSelect
        name: datasharedfolderref
        label: _("Shared folder")
        hasEmptyOption: true
        hint: _("Optional - Location of persistent container data<br/>Only used to substitute CHANGE_TO_COMPOSE_DATA_PATH in compose and env files with this shared folder path.")
      - type: divider
        title: _("Backup")
      - type: sharedFolderSelect
        name: backupsharedfolderref
        label: _("Shared folder")
        hasEmptyOption: true
        hint: _("Location of backups")
      - type: numberInput
        name: backupmaxsize
        label: _("Max Size")
        value: 1
        validators:
          min: 0
          max: 65536
          patternType: integer
          required: true
        hint: _("Units in GB. Backup will skip volumes larger than this size.<br/>Set to 0 for unlimited.")
      - type: divider
        title: _("Docker")
      - type: textInput
        name: dockerStorage
        label: _("Docker storage")
        value: "/var/lib/docker"
        hint: _("Leave blank to use a custom /etc/docker/daemon.json")
      - type: textInput
        name: dockerStatus
        label: _("Status")
        submitValue: false
        readonly: true
      - type: textInput
        name: dockerVersion
        label: _("Docker version")
        submitValue: false
        readonly: true
      - type: textInput
        name: composeVersion
        label: _("Compose version")
        submitValue: false
        readonly: true
      - type: divider
        title: _("Overrides")
      - type: textInput
        name: urlHostname
        label: _("URL hostname")
        value: ""
        hint: _("Override hostname when opening ports in Files, Services, and Containers tabs")
      - type: divider
        title: _("Cache times for tabs")
      - type: container
        fields:
          - type: numberInput
            name: cachetimefiles
            label: _("Files")
            value: 60
            hint: _("Units in seconds.<br/>Set to 0 for no caching.")
            validators:
              min: 0
              max: 65536
              patternType: integer
              required: true
          - type: numberInput
            name: cachetimeservices
            label: _("Services")
            value: 60
            validators:
              min: 0
              max: 65536
              patternType: integer
              required: true
          - type: numberInput
            name: cachetimestats
            label: _("Stats")
            value: 60
            validators:
              min: 0
              max: 65536
              patternType: integer
              required: true
          - type: numberInput
            name: cachetimeimages
            label: _("Images")
            value: 60
            validators:
              min: 0
              max: 65536
              patternType: integer
              required: true
          - type: numberInput
            name: cachetimenetworks
            label: _("Networks")
            value: 60
            validators:
              min: 0
              max: 65536
              patternType: integer
              required: true
          - type: numberInput
            name: cachetimevolumes
            label: _("Volumes")
            value: 60
            validators:
              min: 0
              max: 65536
              patternType: integer
              required: true
          - type: numberInput
            name: cachetimecontainers
            label: _("Containers")
            value: 60
            validators:
              min: 0
              max: 65536
              patternType: integer
              required: true
    buttons:
      - template: submit
      - template: cancel
        execute:
          type: url
          url: "/services/compose"
      - text: _("Reinstall Docker")
        confirmationDialogConfig:
          template: confirmation-danger
          message: _("Are you sure you want to reinstall?")
        execute:
          type: taskDialog
          taskDialog:
            config:
              title: _("Reinstall Docker ...")
              startOnInit: true
              request:
                service: Compose
                method: reinstallDocker
              buttons:
                stop:
                  hidden: true
      - text: _("Restart Docker")
        confirmationDialogConfig:
          template: confirmation-danger
          message: _("Are you sure you want to restart?")
        execute:
          type: request
          request:
            service: Compose
            method: restartDocker
            progressMessage: _("Docker is restarting ...")
            successNotification: _("Docker has been restarted.")
      - text: _("Clear cache")
        execute:
          type: request
          request:
            service: Compose
            method: clearCacheFiles
            progressMessage: _("Clearing cache ...")
            successNotification: _("Cache has been cleared.")
