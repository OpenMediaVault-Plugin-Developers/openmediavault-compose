#!/bin/bash
#
# shellcheck disable=SC1091,SC2086
#
# Copyright (c) 2023-2025 openmediavault plugin developers
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# version: 1.0.2

. /usr/share/openmediavault/scripts/helper-functions

declare -i skip=0

# logging location
logDir="/var/log/"
logFile="${logDir}/omv-compose-restore.log"

_log()
{
  msg=${1}
  echo "[$(date +'%Y-%m-%d %H:%M:%S%z')] [composerestore] ${msg}" | tee -a ${logFile} >&2
}

compose="${1}"
if [ -z "${compose}" ]; then
  _log "No compose name set.  Exiting..."
  exit 10
fi
_log "compose :: ${compose}"

# Get docker storage path
dockerStorage=$(omv_config_get "/config/services/compose/dockerStorage")
_log "Docker storage :: ${dockerStorage}"

# Get the shared folder reference and path
sfref=$(omv_config_get "/config/services/compose/sharedfolderref")
if ! omv_isuuid "${sfref}"; then
  _log "No compose sharedfolder set."
  exit 11
fi
sfpath="$(omv_get_sharedfolder_path "${sfref}")"
if [ ! -d "${sfpath}" ]; then
  _log "Shared folder directory does not exist.  Exiting..."
  exit 12
fi
sfpath="${sfpath/%\/}"
sfpath="${sfpath//\/\//\/}"
_log "Compose file path :: ${sfpath}"

# Get the backup shared folder reference and path
sfref=$(omv_config_get "/config/services/compose/backupsharedfolderref")
if ! omv_isuuid "${sfref}"; then
  _log "No backup sharedfolder set."
  exit 13
fi
backuppath="$(omv_get_sharedfolder_path "${sfref}")"
if [ ! -d "${backuppath}" ]; then
  _log "Backup shared folder directory does not exist.  Exiting..."
  exit 14
fi
backuppath="${backuppath/%\/}"
_log "Backup path :: ${backuppath}"

# set path for yml and env files
composepath="${sfpath}/${compose}"
env="${composepath}/${compose}.env"
globalenv="${sfpath}/global.env"
ovr="${composepath}/compose.override.yml"
yml="${composepath}/${compose}.yml"
if [ ! -f "${yml}" ]; then
  _log "Compose file '${yml}' does not exist."
  skip=1
fi
_log "Compose file :: ${yml}"

# build compose arguments
dockerComposeArgs=("--file" "${yml}")
if [ -f "${ovr}" ]; then
  dockerComposeArgs+=("--file" "${ovr}")
fi
if [ -f "${globalenv}" ]; then
  dockerComposeArgs+=("--env-file" "${globalenv}")
fi
dockerComposeArgs+=("--env-file" "${env}")

if [ ${skip} -ne 1 ]; then
  # save status
  status="$(mktemp)"
  docker compose ls --all --format json | jq -r ".[] | select(.ConfigFiles | contains(\"${yml}\")) | .Status" | tee "${status}"
  _log "status :: $(cat ${status})"

  # stop compose if running
  if grep -q "running" "${status}"; then
    docker compose "${dockerComposeArgs[@]}" stop
  else
    _log "${compose} is not running"
  fi
fi

path="${backuppath}/${compose}"
_log "path :: ${path}"
echo
vollist="${path}/vol.list"
if [ -f "${vollist}" ]; then
  while read -r line; do
    volnum="${line%%,*}"
    volpath="${line#*,}"
    args=(-avr)
    if [[ ! "${volpath}" == */ ]]; then
      volpath="$(dirname "${volpath}")"
    else
      args+=(--delete)
    fi
    src="${path}/${volnum}/"
    if [ ${volnum} -eq 0 ]; then
      volpath="${volpath}/${compose}/"
      volpath="${volpath//\/\//\/}"
    fi
    _log "Source :: ${src}"
    _log "Dest :: ${volpath}"
    if [ ${volnum} -eq 0 ]; then
      cp -v "${src}/${compose}.yml" "${src}/compose.override.yml" "${src}/${compose}.env" "${volpath}"
    else
      rsync "${args[@]}" "${src}" "${volpath}"
    fi
  done < "${vollist}"
else
  _log "No volume list found."
fi

if [ ${skip} -ne 1 ]; then
  # start compose if running before backup
  if grep -q "running" "${status}"; then
    docker compose "${dockerComposeArgs[@]}" start
  fi

  rm -f "${status}"
else
  # add compose file to database if it doesn't exist already
  xpath="//services/compose/files"
  if ! omv_config_exists "${xpath}/file[name='${compose}']"; then
    _log "Adding '${compose}' to the database..."
    composepath="${path}/0/${compose}"
    envfile="${composepath}.env"
    ymlfile="${composepath}.yml"
    envtxt=""
    ymltxt=""
    # escape for xml
    if [ -f "${envfile}" ]; then
      envtxt=$(sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' "${envfile}")
    fi
    if [ -f "${ymlfile}" ]; then
      ymltxt=$(sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' "${ymlfile}")
    fi
    if [ -n "${ymltxt}" ]; then
      # create backup of omv database
      date="$(date +'%Y-%m-%d_%H-%M-%S')"
      cp -fv "${OMV_CONFIG_FILE}" "/root/config_${date}.xml"
      # create database entry
      object="<uuid>$(uuid)</uuid>"
      object="${object}<name>${compose}</name>"
      object="${object}<description></description>"
      object="${object}<body>@@YAML_DATA@@</body>"
      object="${object}<env>@@ENV_DATA@@</env>"
      # add new entry to database
      omv_config_add_node_data "${xpath}" "file" "${object}"
      # repalce temp variables with compose yaml and environment file
      omvdb=$(<"${OMV_CONFIG_FILE}")
      omvdbmod=$(awk -v env="${envtxt}" -v yml="${ymltxt}" '{gsub(/@@ENV_DATA@@/, env); gsub(/@@YAML_DATA@@/, yml)} 1' <<< "${omvdb}")
      echo "${omvdbmod}" > "${OMV_CONFIG_FILE}"
      # mark compose module dirty
      omv_module_set_dirty compose
    fi
  else
    _log "File exists in database."
  fi
fi

_log "Done."

exit 0
