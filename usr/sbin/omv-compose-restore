#!/bin/bash
#
# shellcheck disable=SC1091,SC2086
#
# Copyright (c) 2023 OpenMediaVault Plugin Developers
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# version: 0.0.1

. /usr/share/openmediavault/scripts/helper-functions

compose="${1}"
if [ -z "${compose}" ]; then
  echo "No compose name set.  Exiting..."
  exit 10
fi
echo "compose :: ${compose}"

# Get docker storage path
dockerStorage=$(omv_config_get "/config/services/compose/dockerStorage")
echo "Docker storage :: ${dockerStorage}"

# Get the shared folder reference and path
sfref=$(omv_config_get "/config/services/compose/sharedfolderref")
if ! omv_isuuid "${sfref}"; then
  echo "No compose sharedfolder set."
  exit 11
fi
sfpath="$(omv_get_sharedfolder_path "${sfref}")"
if [ ! -d "${sfpath}" ]; then
  echo "Shared folder directory does not exist.  Exiting..."
  exit 12
fi
echo "Compose file path :: ${sfpath}"

# Get the backup shared folder reference and path
sfref=$(omv_config_get "/config/services/compose/backupsharedfolderref")
if ! omv_isuuid "${sfref}"; then
  echo "No backup sharedfolder set."
  exit 13
fi
backuppath="$(omv_get_sharedfolder_path "${sfref}")"
if [ ! -d "${backuppath}" ]; then
  echo "Backup shared folder directory does not exist.  Exiting..."
  exit 14
fi
echo "Backup path :: ${backuppath}"

# set path for yml and env files
composepath="${sfpath}/${compose}"
env="${composepath}/${compose}.env"
yml="${composepath}/${compose}.yml"
if [ ! -f "${yml}" ]; then
  echo "Compose file '${yml}' does not exist.  Exiting..."
  exit 15
fi
echo "Compose file :: ${yml}"

# save status
status="$(mktemp)"
docker-compose ls --all --filter name="${compose}" --format json | jq .[0].Status | tee "${status}"

# stop compose if running
if grep -q "running" "${status}"; then
  docker-compose --file "${yml}" --env-file "${env}" stop
else
  echo "${compose} is not running"
fi

path="${backuppath}/${compose}"
echo -e "path :: ${path}\n"
vollist="${path}/vol.list"
if [ -f "${vollist}" ]; then
  while read -r line; do
    volnum="${line%%,*}"
    volpath="${line#*,}"
    src="${path}/${volnum}/"
    echo "Source :: ${src}"
    echo "Dest :: ${volpath}"
    rsync -avr --delete "${src}" "${volpath}"
  done < "${vollist}"
else
  echo "No volume list found."
fi

# start compose if running before backup
if grep -q "running" "${status}"; then
  docker-compose --file "${yml}" --env-file "${env}" start
fi

rm -f "${status}"

echo "Done."

exit 0
